import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.Socket;
import java.security.*;
import java.security.cert.*;

import javax.crypto.Cipher;

public abstract class ClientWithoutSecurity {

	private static byte[] nonce = new byte[32];
    private static byte[] encryptedNonce = new byte[128];

	public static void main(String[] args) {

    	String filename = "100.txt";
    	if (args.length > 0) filename = args[0];

    	String serverAddress = "localhost";
    	if (args.length > 1) filename = args[1];

    	int port = 4321;
    	if (args.length > 2) port = Integer.parseInt(args[2]);

		int numBytes = 0;

		Socket clientSocket = null;

        DataOutputStream toServer = null;
        DataInputStream fromServer = null;

    	FileInputStream fileInputStream = null;
        BufferedInputStream bufferedFileInputStream = null;

		long timeStarted = System.nanoTime();

		try {

			System.out.println("Establishing connection to server...");

			// Connect to server and get the input and output streams
			clientSocket = new Socket(serverAddress, port);
			toServer = new DataOutputStream(clientSocket.getOutputStream());
			fromServer = new DataInputStream(clientSocket.getInputStream());

			// * Start of Authentication Protocol
			// InputStream fis = new FileInputStream("certificate_1004379.crt");
			InputStream fis = new FileInputStream("cacsertificate.crt");
			CertificateFactory cf = CertificateFactory.getInstance("X.509");
			X509Certificate CAcert =(X509Certificate) cf.generateCertificate(fis);
			PublicKey key = CAcert.getPublicKey();

			// * Generate nonce
			System.out.println("Generate nonce");
			SecureRandom random = new SecureRandom();
			random.nextBytes(nonce);
			System.out.println("Sent nonce to server");
			toServer.write(nonce);

			// * Get encrypted nonce from server
			System.out.println("Get encrypted nonce from server");
			fromServer.read(encryptedNonce);
			// * Get cert from the nonce

			System.out.println("Get encoded cert from server");
			X509Certificate ServerCert = (X509Certificate) cf.generateCertificate(fromServer);
			
			// * verify cert
			// use my own public key to verify encoded cert
			System.out.println("Verifying cert from server");
			ServerCert.checkValidity();
			ServerCert.verify(key);
			// * cert should be verified at this point

			// * verify server
			// get server's public key from server cert
			// use server's public key to decrypt the nonce is indeed generated by me
			PublicKey serverKey = ServerCert.getPublicKey();
			Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
			cipher.init(Cipher.DECRYPT_MODE, serverKey);
			byte[] decryptNonce = cipher.doFinal(encryptedNonce);

			if (nonce.equals(decryptNonce)) {
				// server is correct
				System.out.println("Server is verified");
			} else {
				// its an ambush!
				System.out.println("Server verification failed");
                System.out.println("Closing all connections...");
                toServer.close();
                fromServer.close();
                clientSocket.close();
			}
			// * Authentication Protocol done

			System.out.println("Sending file...");

			// Send the filename
			toServer.writeInt(0);
			toServer.writeInt(filename.getBytes().length);
			toServer.write(filename.getBytes());
			//toServer.flush();

			// Open the file
			fileInputStream = new FileInputStream(filename);
			bufferedFileInputStream = new BufferedInputStream(fileInputStream);

	        byte [] fromFileBuffer = new byte[117];

	        // Send the file
	        for (boolean fileEnded = false; !fileEnded;) {
				numBytes = bufferedFileInputStream.read(fromFileBuffer);
				fileEnded = numBytes < 117;

				toServer.writeInt(1);
				toServer.writeInt(numBytes);
				toServer.write(fromFileBuffer);
				toServer.flush();
			}

	        bufferedFileInputStream.close();
	        fileInputStream.close();

			System.out.println("Closing connection...");

		} catch (Exception e) {e.printStackTrace();}

		long timeTaken = System.nanoTime() - timeStarted;
		System.out.println("Program took: " + timeTaken/1000000.0 + "ms to run");
	}
}

